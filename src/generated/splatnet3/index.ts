// Code generated by jtd-codegen for TypeScript v0.2.1

export type Splatnet3 = Splatnet3Ad311b99a6288fc95a5c4cb2d2;

export interface Splatnet3Ad311b99a6288fc95a5c4cb2d2 {
  query: "291295ad311b99a6288fc95a5c4cb2d2";
}

export enum BankaraMatchChallengeState {
  Failed = "FAILED",
  Inprogress = "INPROGRESS",
  Succeeded = "SUCCEEDED",
}

export interface BankaraMatchChallenge {
  earnedUdemaePoint: (number | null);
  isPromo: boolean;
  isUdemaeUp: (boolean | null);
  loseCount: number;
  maxLoseCount: number;
  maxWinCount: number;
  state: BankaraMatchChallengeState;
  udemaeAfter: (string | null);
  winCount: number;
}

export interface Color {
  a: number;
  b: number;
  g: number;
  r: number;
}

export interface CoopHistoryDetailAfterGrade {
  id: string;
  name: string;
}

export interface CoopHistoryDetailBossResultBoss {
  id: string;
  image: Image;
  name: string;
}

export interface CoopHistoryDetailBossResult {
  boss: CoopHistoryDetailBossResultBoss;
  hasDefeatBoss: boolean;
}

export interface CoopHistoryDetailCoopStage {
  id: string;
  image: Image;
  name: string;
}

export interface CoopHistoryDetailEnemyResultEnemy {
  id: string;
  image: Image;
  name: string;
}

export interface CoopHistoryDetailEnemyResult {
  defeatCount: number;
  enemy: CoopHistoryDetailEnemyResultEnemy;
  popCount: number;
  teamDefeatCount: number;
}

export enum CoopHistoryDetailRule {
  BigRun = "BIG_RUN",
  Regular = "REGULAR",
}

export interface CoopHistoryDetailScale {
  bronze: number;
  gold: number;
  silver: number;
}

export interface CoopHistoryDetailWaveResultEventWave {
  id: string;
  name: string;
}

export interface CoopHistoryDetailWaveResultSpecialWeapon {
  image: Image;
  name: string;
}

export interface CoopHistoryDetailWaveResult {
  /**
   * Will be null on wave 4
   */
  deliverNorm: (number | null);
  eventWave: (CoopHistoryDetailWaveResultEventWave | null);
  goldenPopCount: number;
  specialWeapons: CoopHistoryDetailWaveResultSpecialWeapon[];

  /**
   * Will be null on wave 4
   */
  teamDeliverCount: (number | null);
  waterLevel: number;
  waveNumber: number;
}

export interface CoopHistoryDetailWeapon {
  image: Image;
  name: string;
}

export interface CoopHistoryDetail {
  afterGrade: (CoopHistoryDetailAfterGrade | null);
  afterGradePoint: (number | null);
  bossResult: (CoopHistoryDetailBossResult | null);
  coopStage: CoopHistoryDetailCoopStage;
  dangerRate: number;
  enemyResults: CoopHistoryDetailEnemyResult[];
  id: string;
  jobBonus: (number | null);
  jobPoint: (number | null);
  jobRate: (number | null);
  jobScore: (number | null);
  memberResults: CoopPlayer[];
  myResult: CoopPlayer;
  playedTime: string;
  resultWave: number;
  rule: CoopHistoryDetailRule;
  scale: (CoopHistoryDetailScale | null);
  scenarioCode: any;
  smellMeter: (number | null);
  waveResults: CoopHistoryDetailWaveResult[];
  weapons: CoopHistoryDetailWeapon[];
}

export interface CoopHistoryDetailResponse {
  coopHistoryDetail: CoopHistoryDetail;
}

export interface CoopHistoryGroupHighestResultGrade {
  id: string;
}

export interface CoopHistoryGroupHighestResult {
  grade: CoopHistoryGroupHighestResultGrade;
  gradePoint: number;
  jobScore: number;
}

export interface CoopHistoryGroup {
  endTime: (string | null);
  highestResult: (CoopHistoryGroupHighestResult | null);
  startTime: (string | null);
}

export interface CoopPlayerPlayerUniform {
  id: string;
  image: Image;
  name: string;
}

export interface CoopPlayerPlayer {
  byname: (string | null);
  name: string;
  nameId: string;
  uniform: CoopPlayerPlayerUniform;
}

export interface CoopPlayerSpecialWeapon {
  image: Image;
  name: string;
}

export interface CoopPlayerWeapon {
  image: Image;
  name: string;
}

export interface CoopPlayer {
  defeatEnemyCount: number;
  deliverCount: number;
  goldenAssistCount: number;
  goldenDeliverCount: number;
  player: CoopPlayerPlayer;
  rescueCount: number;
  rescuedCount: number;
  specialWeapon: (CoopPlayerSpecialWeapon | null);
  weapons: CoopPlayerWeapon[];
}

export interface GearPower {
  desc: string;
  image: Image;
  isEmptySlot: boolean;
  name: string;
}

export interface Image {
  height?: number;
  maskImageUrl?: string;
  overlayImageUrl?: string;
  url?: string;
  width?: number;
}

export enum PlayerGearIsGear {
  ClothingGear = "ClothingGear",
  HeadGear = "HeadGear",
  ShoesGear = "ShoesGear",
}

export interface PlayerGearAdditionalGearPower {
  image: Image;
  name: string;
}

export interface PlayerGearBrand {
  id: string;
  image: Image;
  name: string;
  usualGearPower: GearPower;
}

export interface PlayerGearPrimaryGearPower {
  image: Image;
  name: string;
}

export interface PlayerGear {
  __isGear: PlayerGearIsGear;
  additionalGearPowers: PlayerGearAdditionalGearPower[];
  brand: PlayerGearBrand;
  name: string;
  originalImage: Image;
  primaryGearPower: PlayerGearPrimaryGearPower;
  thumbnailImage: Image;
}

export interface VsHistoryDetailAward {
  name: string;
  rank: string;
}

export enum VsHistoryDetailBankaraMatchMode {
  Challenge = "CHALLENGE",
  Open = "OPEN",
}

export interface VsHistoryDetailBankaraMatch {
  earnedUdemaePoint: (number | null);
  mode: VsHistoryDetailBankaraMatchMode;
}

export enum VsHistoryDetailFestMatchDragonMatchType {
  Decuple = "DECUPLE",
  DoubleDragon = "DOUBLE_DRAGON",
  Dragon = "DRAGON",
  Normal = "NORMAL",
}

export interface VsHistoryDetailFestMatch {
  contribution: number;
  dragonMatchType: VsHistoryDetailFestMatchDragonMatchType;
  jewel: number;
  myFestPower: (number | null);
}

export enum VsHistoryDetailKnockout {
  Lose = "LOSE",
  Neither = "NEITHER",
  Win = "WIN",
}

export interface VsHistoryDetailVsMode {
  id: string;
  mode: VsMode;
}

export interface VsHistoryDetailVsRule {
  id: string;
  name: string;
  rule: VsRule;
}

export interface VsHistoryDetailVsStage {
  id: string;
  image: Image;
  name: string;
}

export interface VsHistoryDetailXMatch {
  lastXPower: (number | null);
}

export interface VsHistoryDetail {
  awards: VsHistoryDetailAward[];
  bankaraMatch: (VsHistoryDetailBankaraMatch | null);
  duration: number;
  festMatch: (VsHistoryDetailFestMatch | null);
  id: string;
  judgement: VsJudgement;
  knockout: (VsHistoryDetailKnockout | null);
  myTeam: VsTeam;
  otherTeams: VsTeam[];
  playedTime: string;
  vsMode: VsHistoryDetailVsMode;
  vsRule: VsHistoryDetailVsRule;
  vsStage: VsHistoryDetailVsStage;
  xMatch: (VsHistoryDetailXMatch | null);
}

export interface VsHistoryDetailResponse {
  vsHistoryDetail: VsHistoryDetail;
}

export enum VsJudgement {
  DeemedLose = "DEEMED_LOSE",
  Draw = "DRAW",
  ExemptedLose = "EXEMPTED_LOSE",
  Lose = "LOSE",
  Win = "WIN",
}

export enum VsMode {
  Bankara = "BANKARA",
  Fest = "FEST",
  Private = "PRIVATE",
  Regular = "REGULAR",
  XMatch = "X_MATCH",
}

export interface VsPlayerNameplateBackground {
  id: string;
  image: Image;
  textColor: Color;
}

export interface VsPlayerNameplateBadge {
  id: string;
  image: Image;
}

export interface VsPlayerNameplate {
  background: VsPlayerNameplateBackground;
  badges: (VsPlayerNameplateBadge | null)[];
}

export interface VsPlayerResult {
  assist: number;
  death: number;
  kill: number;
  noroshiTry: (number | null);
  special: number;
}

export enum VsPlayerSpecies {
  Inkling = "INKLING",
  Octoling = "OCTOLING",
}

export interface VsPlayer {
  byname: string;
  clothingGear: PlayerGear;
  headGear: PlayerGear;
  id: string;
  isMyself: boolean;
  name: string;
  nameId: (string | null);
  nameplate: VsPlayerNameplate;
  paint: number;
  result: (VsPlayerResult | null);
  shoesGear: PlayerGear;
  species: VsPlayerSpecies;
  weapon: VsPlayerWeapon;
}

export interface VsPlayerWeaponSpecialWeapon {
  id: string;
  image: Image;
  maskingImage: Image;
  name: string;
}

export interface VsPlayerWeaponSubWeapon {
  id: string;
  image: Image;
  name: string;
}

export interface VsPlayerWeapon {
  id: string;
  image: Image;
  image2d: Image;
  image2dThumbnail: Image;
  image3d: Image;
  image3dThumbnail: Image;
  name: string;
  specialWeapon: VsPlayerWeaponSpecialWeapon;
  subWeapon: VsPlayerWeaponSubWeapon;
}

export enum VsRule {
  Area = "AREA",
  Clam = "CLAM",
  Goal = "GOAL",
  Loft = "LOFT",
  TriColor = "TRI_COLOR",
  TurfWar = "TURF_WAR",
}

export interface VsTeamResult {
  noroshi: (number | null);
  paintRatio: (number | null);
  score: (number | null);
}

export interface VsTeam {
  color: Color;
  judgement: (VsJudgement | null);
  players: VsPlayer[];
  result: (VsTeamResult | null);
}

export enum XmatchMeasurementState {
  Completed = "COMPLETED",
  Inprogress = "INPROGRESS",
}

export interface XmatchMeasurementVsRule {
  id: string;
  name: string;
  rule: VsRule;
}

export interface XmatchMeasurement {
  isInitial: boolean;
  loseCount: number;
  maxInitialBattleCount: number;
  maxLoseCount: number;
  maxWinCount: number;
  state: XmatchMeasurementState;
  vsRule: XmatchMeasurementVsRule;
  winCount: number;
  xPowerAfter: (number | null);
}
